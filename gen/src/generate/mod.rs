mod char_property;

mod ucd;

use std::fs;
use std::io;
use std::path::PathBuf;

/// The standard auto-generated source disclaimer.
const PREAMBLE: &'static str = "// WARNING: Auto-generated by unic-gen. DO NOT EDIT MANUALLY!";

pub fn generate_all<I, S>(crates: I) -> io::Result<()>
where
    I: IntoIterator<Item = S>,
    S: AsRef<str>,
{
    let mut ucd_version = None;
    let mut unicode_data = None;

    for krate in crates.into_iter() {
        let krate = krate.as_ref();
        if krate.starts_with("unic-ucd") {
            if ucd_version.is_none() {
                println!(">>> Loading UCD Version");
                let version = ucd::read_unicode_version()?;
                ucd_version = Some(version);
            }
            if unicode_data.is_none() {
                println!(">>> Loading UCD UnicodeData");
                let data = ucd::read_unicode_data()?;
                unicode_data = Some(data);
            }
        }

        let path = tables_path(krate);
        if path.exists() {
            fs::remove_dir_all(&path)?;
        }
        fs::create_dir_all(&path)?;
        match krate {
            "unic-ucd-age" => {
                ucd::age::generate(
                    path,
                    ucd_version.as_ref().unwrap(),
                    unicode_data.as_ref().unwrap(),
                )?;
            }
            "unic-ucd-bidi" => {
                ucd::bidi::generate(
                    path,
                    ucd_version.as_ref().unwrap(),
                    unicode_data.as_ref().unwrap(),
                )?;
            }
            "unic-ucd-category" => {
                ucd::category::generate(
                    path,
                    ucd_version.as_ref().unwrap(),
                    unicode_data.as_ref().unwrap(),
                )?;
            }
            "unic-ucd-core" => {
                ucd::core::generate(
                    path,
                    ucd_version.as_ref().unwrap(),
                    unicode_data.as_ref().unwrap(),
                )?;
            }
            "unic-ucd-normal" => {
                ucd::normal::generate(
                    path,
                    ucd_version.as_ref().unwrap(),
                    unicode_data.as_ref().unwrap(),
                )?;
            }
            _ => (),
        }
    }

    Ok(())
}

/// Turn a crate name into the path to its tables folder
fn tables_path(package: &str) -> PathBuf {
    let mut path = PathBuf::new();
    for dir in package.split('-') {
        path.push(dir);
    }
    path.push("src/tables");
    path
}
