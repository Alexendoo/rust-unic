#![allow(dead_code)]

use std::collections::{BTreeMap, BTreeSet};
use std::fmt;

const PREAMBLE: &'static str = "// WARNING: Auto-generated by unic-gen. DO NOT EDIT MANUALLY!";

/// A mapping from character codepoints to properties.
///
/// Implementations are expected to (though not required to) be naive storage that
/// compacts to the indicated format when calling an endpoint provided by this trait.
///
/// The strings created by the format functions are designed to be used as "`rsv`" (Rust Value)
/// generated source files and imported with the `include!` macro.
pub trait CharMap<T>
where
    T: Eq,
{
    /// A simple deduplicated binary search array slice.
    ///
    /// Output format:
    ///
    /// ```text
    /// &[
    ///     ('low', 'high', Value),
    ///     ('low', 'high', Value),
    /// ]
    /// ```
    ///
    /// Where
    ///
    /// - `'low'` is a `char::escape_unicode` literal for the lowest character in the range
    /// - `'high'` is a `char::escape_unicode` literal for the highest character in the range
    /// - `Value` is the result of `Display::fmt` on the associated value, or left out for `()`.
    ///
    /// <aside>Note: This will likely be adjusted to take a format function
    ///        rather than rely on `Display::fmt`</aside>
    ///
    /// It is guaranteed that the `'high'` of one range will always be less than the `'low'` of
    /// the next range (such that the array slice is fit for a binary search). The ranges
    /// represented by `'low'` and `'high'` are inclusive on both ends.
    fn to_bsearch_table(&self) -> String;
}

impl<T> CharMap<T> for BTreeMap<char, T>
where
    T: fmt::Display + Eq,
{
    fn to_bsearch_table(&self) -> String {
        let mut entries = self.iter();

        let first = entries.next();
        if first.is_none() {
            return String::from("&[]");
        }

        let (mut low, mut value) = first.unwrap();
        let mut high = low;
        let mut out = String::from("&[\n");

        for (char, property) in entries {
            if property != value || (*char as u32) > (*high as u32 + 1) {
                append_triple(&mut out, *low, *high, value);
                low = char;
                high = char;
                value = property;
            } else {
                assert!((*char as u32) == (*high as u32 + 1));
                high = char;
            }
        }

        append_triple(&mut out, *low, *high, value);
        out.push_str("]");
        out
    }
}

impl CharMap<()> for BTreeSet<char> {
    fn to_bsearch_table(&self) -> String {
        let mut entries = self.iter();

        let first = entries.next();
        if first.is_none() {
            return String::from("&[]");
        }

        let mut low = first.unwrap();
        let mut high = low;
        let mut out = String::from("&[\n");

        for char in entries {
            if (*char as u32) > (*high as u32 + 1) {
                append_duple(&mut out, *low, *high);
                low = char;
                high = char;
            } else {
                assert!((*char as u32) == (*high as u32 + 1));
                high = char;
            }
        }

        append_duple(&mut out, *low, *high);
        out.push_str("]");
        out
    }
}

fn append_triple<T>(str: &mut String, a: char, b: char, c: T)
where
    T: fmt::Display,
{
    str.push_str(
        &format!(
            "    ('{}', '{}', {}),\n",
            a.escape_unicode(),
            b.escape_unicode(),
            c,
        )
    )
}

fn append_duple(str: &mut String, a: char, b: char) {
    str.push_str(
        &format!(
            "    ('{}', '{}'),\n",
            a.escape_unicode(),
            b.escape_unicode(),
        )
    )
}

#[cfg(test)]
mod test {
    use super::*;

    #[test]
    fn simple_map_bsearch_table() {
        let mut map: BTreeMap<char, &'static str> = Default::default();
        map.insert('a', "Low");
        map.insert('b', "Low");
        map.insert('c', "Low");
        map.insert('d', "Mid");
        map.insert('y', "High");
        map.insert('f', "Mid");
        map.insert('e', "Mid");
        map.insert('x', "High");
        map.insert('z', "High");
        assert_eq!(
            map.to_bsearch_table(),
            "\
&[
    ('\\u{61}', '\\u{63}', Low),
    ('\\u{64}', '\\u{66}', Mid),
    ('\\u{78}', '\\u{7a}', High),
]"
        );
    }

    #[test]
    fn simple_set_bsearch_table() {
        let mut set: BTreeSet<char> = Default::default();
        set.insert('a');
        set.insert('b');
        set.insert('c');
        set.insert('d');
        set.insert('y');
        set.insert('f');
        set.insert('e');
        set.insert('x');
        set.insert('z');
        assert_eq!(
            set.to_bsearch_table(),
            "\
&[
    ('\\u{61}', '\\u{66}'),
    ('\\u{78}', '\\u{7a}'),
]"
        )
    }
}
